/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.softtech.internship.frontend.gui;

import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.softtech.internship.frontend.Currency;
import org.softtech.internship.frontend.Material;
import org.softtech.internship.frontend.Recipe;
import org.softtech.internship.frontend.RecipeMaterial;
import org.softtech.internship.frontend.dto.CurrencyAddDTO;
import org.softtech.internship.frontend.dto.CurrencyUpdateDTO;
import org.softtech.internship.frontend.dto.MaterialAddDTO;
import org.softtech.internship.frontend.dto.MaterialUpdateDTO;
import org.softtech.internship.frontend.dto.RecipeAddDTO;
import org.softtech.internship.frontend.dto.RecipeUpdateDTO;
import org.softtech.internship.frontend.hm.HyperMethod;
import org.softtech.internship.frontend.models.CurrencyTableModel;
import org.softtech.internship.frontend.models.MaterialListModel;
import org.softtech.internship.frontend.models.MaterialTableModel;
import org.softtech.internship.frontend.models.RecipeTableModel;

/**
 *
 * @author yusa
 */
public class MainFrame extends javax.swing.JFrame {

    private String selectedMaterialID;
    private String selectedCurrencyID;
    private String selectedRecipeID;

    private List<Material> materialList;
    private List<Currency> currencyList;
    private List<Recipe> recipeList;

    private MaterialTableModel materialTableModel;
    private RecipeTableModel recipeTableModel;
    private CurrencyTableModel currencyTableModel;

    private MaterialListModel includedListModel;
    private MaterialListModel excludedListModel;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        setup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        jPanelMaterial = new javax.swing.JPanel();
        jScrollPaneMaterial = new javax.swing.JScrollPane();
        jTableMaterials = new javax.swing.JTable();
        jPanelMaterialInfo = new javax.swing.JPanel();
        jLabelMaterialName = new javax.swing.JLabel();
        jTextFieldMaterialName = new javax.swing.JTextField();
        jLabelMaterialPrice = new javax.swing.JLabel();
        jTextFieldMaterialPrice = new javax.swing.JTextField();
        jComboBoxCurrencies = new javax.swing.JComboBox<>();
        jButtonAddM = new javax.swing.JButton();
        jButtonUpdateM = new javax.swing.JButton();
        jButtonDeleteM = new javax.swing.JButton();
        jButtonClearM = new javax.swing.JButton();
        jPanelRecipe = new javax.swing.JPanel();
        jScrollPaneRecipe = new javax.swing.JScrollPane();
        jTableRecipes = new javax.swing.JTable();
        jPanelRecipeInfo = new javax.swing.JPanel();
        jLabelRecipeName = new javax.swing.JLabel();
        jTextFieldRecipeName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListExcluded = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListIncluded = new javax.swing.JList<>();
        jButtonInclude = new javax.swing.JButton();
        jButtonExclude = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonClearR = new javax.swing.JButton();
        jButtonDeleteR = new javax.swing.JButton();
        jButtonUpdateR = new javax.swing.JButton();
        jButtonAddR = new javax.swing.JButton();
        jLabelQuantity = new javax.swing.JLabel();
        jTextFieldQuantity = new javax.swing.JTextField();
        jPanelCurrency = new javax.swing.JPanel();
        jScrollPaneCurrency = new javax.swing.JScrollPane();
        jTableCurrencies = new javax.swing.JTable();
        jPanelCurrencyInfo = new javax.swing.JPanel();
        jLabelCurrencyName = new javax.swing.JLabel();
        jTextFieldCurrencyName = new javax.swing.JTextField();
        jLabelCurrencyRate = new javax.swing.JLabel();
        jTextFieldCurrencyRate = new javax.swing.JTextField();
        jButtonAddC = new javax.swing.JButton();
        jButtonUpdateC = new javax.swing.JButton();
        jButtonDeleteC = new javax.swing.JButton();
        jButtonClearC = new javax.swing.JButton();
        jButtonRefresh = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SOFTTECH Internship Project - Client Side");
        setResizable(false);

        jTabbedPane.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneStateChanged(evt);
            }
        });

        jScrollPaneMaterial.setPreferredSize(new java.awt.Dimension(475, 651));
        jScrollPaneMaterial.setViewportView(jTableMaterials);

        jLabelMaterialName.setFont(new java.awt.Font("Liberation Sans", 1, 24)); // NOI18N
        jLabelMaterialName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelMaterialName.setLabelFor(jTextFieldMaterialName);
        jLabelMaterialName.setText("Material Name:");

        jTextFieldMaterialName.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N

        jLabelMaterialPrice.setFont(new java.awt.Font("Liberation Sans", 1, 24)); // NOI18N
        jLabelMaterialPrice.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelMaterialPrice.setLabelFor(jTextFieldMaterialPrice);
        jLabelMaterialPrice.setText("Unit Price:");

        jTextFieldMaterialPrice.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N

        jComboBoxCurrencies.setFont(new java.awt.Font("Liberation Sans", 1, 24)); // NOI18N
        jComboBoxCurrencies.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButtonAddM.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jButtonAddM.setText("ADD");
        jButtonAddM.setPreferredSize(new java.awt.Dimension(200, 65));
        jButtonAddM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddMActionPerformed(evt);
            }
        });

        jButtonUpdateM.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jButtonUpdateM.setText("UPDATE");
        jButtonUpdateM.setPreferredSize(new java.awt.Dimension(200, 65));
        jButtonUpdateM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateMActionPerformed(evt);
            }
        });

        jButtonDeleteM.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jButtonDeleteM.setText("DELETE");
        jButtonDeleteM.setPreferredSize(new java.awt.Dimension(200, 65));
        jButtonDeleteM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteMActionPerformed(evt);
            }
        });

        jButtonClearM.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jButtonClearM.setText("CLEAR");
        jButtonClearM.setPreferredSize(new java.awt.Dimension(200, 65));
        jButtonClearM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearMActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelMaterialInfoLayout = new javax.swing.GroupLayout(jPanelMaterialInfo);
        jPanelMaterialInfo.setLayout(jPanelMaterialInfoLayout);
        jPanelMaterialInfoLayout.setHorizontalGroup(
            jPanelMaterialInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMaterialInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMaterialInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMaterialInfoLayout.createSequentialGroup()
                        .addComponent(jLabelMaterialName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldMaterialName))
                    .addGroup(jPanelMaterialInfoLayout.createSequentialGroup()
                        .addComponent(jLabelMaterialPrice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldMaterialPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxCurrencies, 0, 132, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMaterialInfoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelMaterialInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonClearM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(137, 137, 137))
        );
        jPanelMaterialInfoLayout.setVerticalGroup(
            jPanelMaterialInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMaterialInfoLayout.createSequentialGroup()
                .addContainerGap(67, Short.MAX_VALUE)
                .addGroup(jPanelMaterialInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMaterialName)
                    .addComponent(jTextFieldMaterialName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelMaterialInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMaterialPrice)
                    .addComponent(jTextFieldMaterialPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCurrencies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(jButtonAddM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonUpdateM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonDeleteM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonClearM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
        );

        javax.swing.GroupLayout jPanelMaterialLayout = new javax.swing.GroupLayout(jPanelMaterial);
        jPanelMaterial.setLayout(jPanelMaterialLayout);
        jPanelMaterialLayout.setHorizontalGroup(
            jPanelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMaterialLayout.createSequentialGroup()
                .addComponent(jScrollPaneMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanelMaterialInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelMaterialLayout.setVerticalGroup(
            jPanelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jPanelMaterialInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane.addTab("Materials", jPanelMaterial);

        jScrollPaneRecipe.setPreferredSize(new java.awt.Dimension(475, 651));
        jScrollPaneRecipe.setViewportView(jTableRecipes);

        jLabelRecipeName.setFont(new java.awt.Font("Liberation Sans", 1, 24)); // NOI18N
        jLabelRecipeName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelRecipeName.setLabelFor(jTextFieldRecipeName);
        jLabelRecipeName.setText("Recipe Name:");

        jTextFieldRecipeName.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N

        jScrollPane2.setPreferredSize(new java.awt.Dimension(150, 200));

        jListExcluded.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        jListExcluded.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jListExcluded);

        jScrollPane3.setPreferredSize(new java.awt.Dimension(150, 200));

        jListIncluded.setFont(new java.awt.Font("Liberation Sans", 0, 20)); // NOI18N
        jListIncluded.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jListIncluded);

        jButtonInclude.setText(">>>");
        jButtonInclude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIncludeActionPerformed(evt);
            }
        });

        jButtonExclude.setText("<<<");
        jButtonExclude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcludeActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 22)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("All Materials");

        jLabel2.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Recipe Materials");

        jButtonClearR.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jButtonClearR.setText("CLEAR");
        jButtonClearR.setPreferredSize(new java.awt.Dimension(200, 65));
        jButtonClearR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearRActionPerformed(evt);
            }
        });

        jButtonDeleteR.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jButtonDeleteR.setText("DELETE");
        jButtonDeleteR.setPreferredSize(new java.awt.Dimension(200, 65));
        jButtonDeleteR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteRActionPerformed(evt);
            }
        });

        jButtonUpdateR.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jButtonUpdateR.setText("UPDATE");
        jButtonUpdateR.setPreferredSize(new java.awt.Dimension(200, 65));
        jButtonUpdateR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateRActionPerformed(evt);
            }
        });

        jButtonAddR.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jButtonAddR.setText("ADD");
        jButtonAddR.setPreferredSize(new java.awt.Dimension(200, 65));
        jButtonAddR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddRActionPerformed(evt);
            }
        });

        jLabelQuantity.setFont(new java.awt.Font("Liberation Sans", 0, 20)); // NOI18N
        jLabelQuantity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelQuantity.setLabelFor(jTextFieldQuantity);
        jLabelQuantity.setText("Quantity (Kg)");

        jTextFieldQuantity.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldQuantity.setText("1.00");

        javax.swing.GroupLayout jPanelRecipeInfoLayout = new javax.swing.GroupLayout(jPanelRecipeInfo);
        jPanelRecipeInfo.setLayout(jPanelRecipeInfoLayout);
        jPanelRecipeInfoLayout.setHorizontalGroup(
            jPanelRecipeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRecipeInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRecipeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelRecipeInfoLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelRecipeInfoLayout.createSequentialGroup()
                        .addComponent(jLabelRecipeName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldRecipeName, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE))
                    .addGroup(jPanelRecipeInfoLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanelRecipeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelRecipeInfoLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanelRecipeInfoLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(jPanelRecipeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonInclude)
                                    .addComponent(jButtonExclude))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRecipeInfoLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldQuantity)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelRecipeInfoLayout.createSequentialGroup()
                        .addGroup(jPanelRecipeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonDeleteR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAddR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanelRecipeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonUpdateR, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonClearR, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanelRecipeInfoLayout.setVerticalGroup(
            jPanelRecipeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRecipeInfoLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanelRecipeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRecipeName)
                    .addComponent(jTextFieldRecipeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelRecipeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelRecipeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRecipeInfoLayout.createSequentialGroup()
                        .addComponent(jLabelQuantity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldQuantity)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonInclude)
                        .addGap(49, 49, 49)
                        .addComponent(jButtonExclude)))
                .addGap(18, 18, 18)
                .addGroup(jPanelRecipeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAddR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelRecipeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonDeleteR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonClearR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelRecipeLayout = new javax.swing.GroupLayout(jPanelRecipe);
        jPanelRecipe.setLayout(jPanelRecipeLayout);
        jPanelRecipeLayout.setHorizontalGroup(
            jPanelRecipeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRecipeLayout.createSequentialGroup()
                .addComponent(jScrollPaneRecipe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanelRecipeInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelRecipeLayout.setVerticalGroup(
            jPanelRecipeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneRecipe, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)
            .addComponent(jPanelRecipeInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane.addTab("Recipes", jPanelRecipe);

        jScrollPaneCurrency.setPreferredSize(new java.awt.Dimension(475, 651));
        jScrollPaneCurrency.setViewportView(jTableCurrencies);

        jLabelCurrencyName.setFont(new java.awt.Font("Liberation Sans", 1, 24)); // NOI18N
        jLabelCurrencyName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelCurrencyName.setLabelFor(jTextFieldCurrencyName);
        jLabelCurrencyName.setText("Currency Name:");

        jTextFieldCurrencyName.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N

        jLabelCurrencyRate.setFont(new java.awt.Font("Liberation Sans", 1, 24)); // NOI18N
        jLabelCurrencyRate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelCurrencyRate.setLabelFor(jTextFieldCurrencyRate);
        jLabelCurrencyRate.setText("Conversion Rate:");

        jTextFieldCurrencyRate.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N

        jButtonAddC.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jButtonAddC.setText("ADD");
        jButtonAddC.setPreferredSize(new java.awt.Dimension(200, 65));
        jButtonAddC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddCActionPerformed(evt);
            }
        });

        jButtonUpdateC.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jButtonUpdateC.setText("UPDATE");
        jButtonUpdateC.setPreferredSize(new java.awt.Dimension(200, 65));
        jButtonUpdateC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateCActionPerformed(evt);
            }
        });

        jButtonDeleteC.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jButtonDeleteC.setText("DELETE");
        jButtonDeleteC.setPreferredSize(new java.awt.Dimension(200, 65));
        jButtonDeleteC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteCActionPerformed(evt);
            }
        });

        jButtonClearC.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jButtonClearC.setText("CLEAR");
        jButtonClearC.setPreferredSize(new java.awt.Dimension(200, 65));
        jButtonClearC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearCActionPerformed(evt);
            }
        });

        jButtonRefresh.setText("REFRESH");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCurrencyInfoLayout = new javax.swing.GroupLayout(jPanelCurrencyInfo);
        jPanelCurrencyInfo.setLayout(jPanelCurrencyInfoLayout);
        jPanelCurrencyInfoLayout.setHorizontalGroup(
            jPanelCurrencyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCurrencyInfoLayout.createSequentialGroup()
                .addGroup(jPanelCurrencyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCurrencyInfoLayout.createSequentialGroup()
                        .addGroup(jPanelCurrencyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelCurrencyInfoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanelCurrencyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelCurrencyName)
                                    .addComponent(jLabelCurrencyRate))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelCurrencyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldCurrencyRate, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                                    .addComponent(jTextFieldCurrencyName)))
                            .addGroup(jPanelCurrencyInfoLayout.createSequentialGroup()
                                .addGap(138, 138, 138)
                                .addGroup(jPanelCurrencyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButtonClearC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonDeleteC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonUpdateC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonAddC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 20, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCurrencyInfoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonRefresh)))
                .addContainerGap())
        );
        jPanelCurrencyInfoLayout.setVerticalGroup(
            jPanelCurrencyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCurrencyInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonRefresh)
                .addGap(43, 43, 43)
                .addGroup(jPanelCurrencyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCurrencyName)
                    .addComponent(jTextFieldCurrencyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCurrencyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCurrencyRate)
                    .addComponent(jTextFieldCurrencyRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(jButtonAddC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonUpdateC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonDeleteC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonClearC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelCurrencyLayout = new javax.swing.GroupLayout(jPanelCurrency);
        jPanelCurrency.setLayout(jPanelCurrencyLayout);
        jPanelCurrencyLayout.setHorizontalGroup(
            jPanelCurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCurrencyLayout.createSequentialGroup()
                .addComponent(jScrollPaneCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanelCurrencyInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelCurrencyLayout.setVerticalGroup(
            jPanelCurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jPanelCurrencyInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane.addTab("Currencies", jPanelCurrency);

        jButton1.setText("LOGOUT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 648, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setSize(new java.awt.Dimension(960, 720));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonClearCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearCActionPerformed
        jTextFieldCurrencyName.setText("");
        jTextFieldCurrencyRate.setText("");
        selectedCurrencyID = "";
    }//GEN-LAST:event_jButtonClearCActionPerformed

    private void jButtonClearMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearMActionPerformed
        jTextFieldMaterialName.setText("");
        jTextFieldMaterialPrice.setText("");
        jComboBoxCurrencies.setSelectedIndex(0);
        selectedMaterialID = "";
    }//GEN-LAST:event_jButtonClearMActionPerformed

    private void jTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPaneStateChanged
        if (materialTableModel != null
                && recipeTableModel != null
                && currencyTableModel != null
                && jComboBoxCurrencies != null)
            update();
    }//GEN-LAST:event_jTabbedPaneStateChanged

    private void jButtonClearRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearRActionPerformed
        jTextFieldRecipeName.setText("");
        includedListModel.setMaterialList(new ArrayList<>());
        excludedListModel.setMaterialList(getRecipeMaterials());
        selectedRecipeID = "";
    }//GEN-LAST:event_jButtonClearRActionPerformed

    private void jButtonDeleteMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteMActionPerformed
        if (HyperMethod.deleteMaterial(selectedMaterialID)) {
            update();
            jTextFieldMaterialName.setText("");
            jTextFieldMaterialPrice.setText("");
            selectedMaterialID = "";
        }
    }//GEN-LAST:event_jButtonDeleteMActionPerformed

    private void jButtonDeleteRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteRActionPerformed
        if (HyperMethod.deleteRecipe(selectedRecipeID)) {
            update();
            jTextFieldRecipeName.setText("");
            includedListModel.setMaterialList(new ArrayList<>());
            excludedListModel.setMaterialList(getRecipeMaterials());
            selectedRecipeID = "";
        }
    }//GEN-LAST:event_jButtonDeleteRActionPerformed

    private void jButtonDeleteCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteCActionPerformed
        if (HyperMethod.deleteCurrency(selectedCurrencyID)) {
            update();
            jTextFieldCurrencyName.setText("");
            jTextFieldCurrencyRate.setText("");
            selectedCurrencyID = "";
        }
    }//GEN-LAST:event_jButtonDeleteCActionPerformed

    private void jButtonAddMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddMActionPerformed
        String name = jTextFieldMaterialName.getText();
        String price = jTextFieldMaterialPrice.getText();
        String currency = jComboBoxCurrencies.getSelectedItem().toString();
        if (!name.isEmpty() && !price.isEmpty() && !currency.isEmpty()) {
            try {
                Double price_d = Double.valueOf(price);
                MaterialAddDTO materialAddDTO = MaterialAddDTO.builder()
                        .material_name(name)
                        .price(price_d)
                        .currency_name(currency)
                        .build();
                if (HyperMethod.addMaterial(materialAddDTO)) {
                    update();
                    jTextFieldMaterialName.setText("");
                    jTextFieldMaterialPrice.setText("");
                    selectedMaterialID = "";
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane,
                        "Enter a valid number to price field!",
                        "WARNING",
                        JOptionPane.WARNING_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonAddMActionPerformed

    private void jButtonAddCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddCActionPerformed
        String name = jTextFieldCurrencyName.getText();
        String price = jTextFieldCurrencyRate.getText();
        if (!name.isEmpty() && !price.isEmpty()) {
            try {
                Double price_d = Double.valueOf(price);
                CurrencyAddDTO currencyAddDTO = CurrencyAddDTO.builder()
                        .currency_name(name)
                        .currency_rate(price_d)
                        .build();
                if (HyperMethod.addCurrency(currencyAddDTO)) {
                    update();
                    jTextFieldCurrencyName.setText("");
                    jTextFieldCurrencyRate.setText("");
                    selectedCurrencyID = "";
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane,
                        "Enter a valid number to conversion rate field!",
                        "WARNING",
                        JOptionPane.WARNING_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonAddCActionPerformed

    private void jButtonAddRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddRActionPerformed
        String name = jTextFieldRecipeName.getText();
        List<RecipeMaterial> materials = includedListModel.getMaterialList();

        RecipeAddDTO recipeAddDTO = RecipeAddDTO.builder()
                .recipe_name(name)
                .material_id_list(materials)
                .build();
        if (HyperMethod.addRecipe(recipeAddDTO)) {
            update();
            jTextFieldRecipeName.setText("");
            includedListModel.setMaterialList(new ArrayList<>());
            excludedListModel.setMaterialList(getRecipeMaterials());
            selectedRecipeID = "";
        }
    }//GEN-LAST:event_jButtonAddRActionPerformed

    private void jButtonIncludeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIncludeActionPerformed
        int selectedIndex = jListExcluded.getSelectedIndex();
        if (selectedIndex != -1) {
            try {
                RecipeMaterial m = excludedListModel.getMaterialList().get(selectedIndex);
                excludedListModel.removeElement(m);
                List<RecipeMaterial> materialList1 = includedListModel.getMaterialList();
                Double v = Double.parseDouble(jTextFieldQuantity.getText());
                m.setQuantity(v);
                materialList1.add(m);
                includedListModel.setMaterialList(materialList1);
                update();
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonIncludeActionPerformed

    private void jButtonExcludeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcludeActionPerformed
        int selectedIndex = jListIncluded.getSelectedIndex();
        if (selectedIndex != -1) {
            RecipeMaterial m = includedListModel.getMaterialList().get(selectedIndex);
            includedListModel.removeElement(m);
            List<RecipeMaterial> materialList1 = excludedListModel.getMaterialList();
            m.setQuantity(0d);
            materialList1.add(m);
            excludedListModel.setMaterialList(materialList1);
            update();
        }
    }//GEN-LAST:event_jButtonExcludeActionPerformed

    private void jButtonUpdateMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateMActionPerformed
        String name = jTextFieldMaterialName.getText();
        String price = jTextFieldMaterialPrice.getText();
        String currency_name = jComboBoxCurrencies.getSelectedItem().toString();
        if (!name.isEmpty() && !price.isEmpty() && !currency_name.isEmpty() && !selectedMaterialID.isEmpty()) {
            try {
                Double price_d = Double.valueOf(price);
                MaterialUpdateDTO materialUpdateDTO = MaterialUpdateDTO.builder()
                        .material_name(name)
                        .price(price_d)
                        .currency_name(currency_name)
                        .build();
                if (HyperMethod.updateMaterial(selectedMaterialID, materialUpdateDTO)) {
                    update();
                    jTextFieldMaterialName.setText("");
                    jTextFieldMaterialPrice.setText("");
                    selectedMaterialID = "";
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane,
                        "Enter a valid number to price field!",
                        "WARNING",
                        JOptionPane.WARNING_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonUpdateMActionPerformed

    private void jButtonUpdateCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateCActionPerformed
        String name = jTextFieldCurrencyName.getText();
        String price = jTextFieldCurrencyRate.getText();
        if (!name.isEmpty() && !price.isEmpty() && !selectedCurrencyID.isEmpty()) {
            try {
                Double price_d = Double.valueOf(price);
                CurrencyUpdateDTO currencyUpdateDTO = CurrencyUpdateDTO.builder()
                        .currency_name(name)
                        .currency_rate(price_d)
                        .build();
                if (HyperMethod.updateCurrency(selectedCurrencyID, currencyUpdateDTO)) {
                    update();
                    jTextFieldCurrencyName.setText("");
                    jTextFieldCurrencyRate.setText("");
                    selectedCurrencyID = "";
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane,
                        "Enter a valid number to conversion rate field!",
                        "WARNING",
                        JOptionPane.WARNING_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonUpdateCActionPerformed

    private void jButtonUpdateRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateRActionPerformed
        String name = jTextFieldRecipeName.getText();
        if (!name.isEmpty() && includedListModel.getSize() > 0 && !selectedRecipeID.isEmpty()) {
            List<RecipeMaterial> materials = includedListModel.getMaterialList();
            RecipeUpdateDTO recipeUpdateDTO = RecipeUpdateDTO.builder()
                    .recipe_name(name)
                    .material_id_list(materials)
                    .build();
            if (HyperMethod.updateRecipe(selectedRecipeID, recipeUpdateDTO)) {
                update();
                jTextFieldRecipeName.setText("");
                includedListModel.setMaterialList(new ArrayList<>());
                excludedListModel.setMaterialList(getRecipeMaterials());
                selectedRecipeID = "";
            }
        }
    }//GEN-LAST:event_jButtonUpdateRActionPerformed

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        if (HyperMethod.refresh()) {
            update();
            jTextFieldCurrencyName.setText("");
            jTextFieldCurrencyRate.setText("");
            selectedCurrencyID = "";
        } else {
            JOptionPane.showMessageDialog(rootPane,
                    "Could not refresh to live currency data!",
                    "WARNING",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(HyperMethod.logout())
        {
            dispose();
            LoginFrame loginFrame = new LoginFrame();
            loginFrame.setVisible(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAddC;
    private javax.swing.JButton jButtonAddM;
    private javax.swing.JButton jButtonAddR;
    private javax.swing.JButton jButtonClearC;
    private javax.swing.JButton jButtonClearM;
    private javax.swing.JButton jButtonClearR;
    private javax.swing.JButton jButtonDeleteC;
    private javax.swing.JButton jButtonDeleteM;
    private javax.swing.JButton jButtonDeleteR;
    private javax.swing.JButton jButtonExclude;
    private javax.swing.JButton jButtonInclude;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonUpdateC;
    private javax.swing.JButton jButtonUpdateM;
    private javax.swing.JButton jButtonUpdateR;
    private javax.swing.JComboBox<String> jComboBoxCurrencies;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelCurrencyName;
    private javax.swing.JLabel jLabelCurrencyRate;
    private javax.swing.JLabel jLabelMaterialName;
    private javax.swing.JLabel jLabelMaterialPrice;
    private javax.swing.JLabel jLabelQuantity;
    private javax.swing.JLabel jLabelRecipeName;
    private javax.swing.JList<String> jListExcluded;
    private javax.swing.JList<String> jListIncluded;
    private javax.swing.JPanel jPanelCurrency;
    private javax.swing.JPanel jPanelCurrencyInfo;
    private javax.swing.JPanel jPanelMaterial;
    private javax.swing.JPanel jPanelMaterialInfo;
    private javax.swing.JPanel jPanelRecipe;
    private javax.swing.JPanel jPanelRecipeInfo;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPaneCurrency;
    private javax.swing.JScrollPane jScrollPaneMaterial;
    private javax.swing.JScrollPane jScrollPaneRecipe;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTableCurrencies;
    private javax.swing.JTable jTableMaterials;
    private javax.swing.JTable jTableRecipes;
    private javax.swing.JTextField jTextFieldCurrencyName;
    private javax.swing.JTextField jTextFieldCurrencyRate;
    private javax.swing.JTextField jTextFieldMaterialName;
    private javax.swing.JTextField jTextFieldMaterialPrice;
    private javax.swing.JTextField jTextFieldQuantity;
    private javax.swing.JTextField jTextFieldRecipeName;
    // End of variables declaration//GEN-END:variables

    private void setup() {
        materialList = HyperMethod.getMaterials();
        currencyList = HyperMethod.getCurrencies();
        recipeList = HyperMethod.getRecipes();

        materialTableModel = new MaterialTableModel(materialList);
        recipeTableModel = new RecipeTableModel(recipeList, materialList, currencyList);
        currencyTableModel = new CurrencyTableModel(currencyList);

        jTableMaterials.setModel(materialTableModel);
        jTableRecipes.setModel(recipeTableModel);
        jTableCurrencies.setModel(currencyTableModel);

        tableSettings(jTableMaterials);
        tableSettings(jTableRecipes);
        tableSettings(jTableCurrencies);

        List<RecipeMaterial> recipeMaterialList = getRecipeMaterials();

        excludedListModel = new MaterialListModel(recipeMaterialList, materialList);
        includedListModel = new MaterialListModel(new ArrayList<>(), materialList);
        jListExcluded.setModel(excludedListModel);
        jListIncluded.setModel(includedListModel);

        currencyComboBoxSetter(jComboBoxCurrencies);

        tableSelectionListener(jTableMaterials);
        tableSelectionListener(jTableRecipes);
        tableSelectionListener(jTableCurrencies);

        listSelectionListener(jListExcluded);
        listSelectionListener(jListIncluded);
    }

    private void update() {
        materialList = HyperMethod.getMaterials();
        materialTableModel.setMaterialList(materialList);

        currencyList = HyperMethod.getCurrencies();
        currencyTableModel.setCurrencyList(currencyList);

        recipeList = HyperMethod.getRecipes();
        recipeTableModel.setRecipeList(recipeList);

        currencyComboBoxSetter(jComboBoxCurrencies);
    }

    private List<RecipeMaterial> getRecipeMaterials() {
        List<RecipeMaterial> recipeMaterialList = new ArrayList<>();
        materialList.forEach(material -> {
            RecipeMaterial build = RecipeMaterial.builder()
                    .material_id(material.getId())
                    .quantity(0d)
                    .build();
            recipeMaterialList.add(build);
        });
        return recipeMaterialList;
    }

    private void tableSettings(JTable table) {
        // Change the font for the cell content
        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();
        Font cellFont = new Font("Arial", Font.BOLD, 16); // Change the font and size
        cellRenderer.setFont(cellFont);
        table.setDefaultRenderer(Object.class, cellRenderer);

        // Change the row height to fit the font size
        int rowHeight = cellFont.getSize() + 8; // Adjust as needed
        table.setRowHeight(rowHeight);

        // Change the column width to fit the font size
        TableColumnModel columnModel = table.getColumnModel();
        for (int columnIndex = 0; columnIndex < table.getColumnCount(); columnIndex++) {
            TableColumn column = columnModel.getColumn(columnIndex);
            column.setPreferredWidth(rowHeight * 3); // Adjust as needed
        }

        // Change the font for the table header
        JTableHeader tableHeader = table.getTableHeader();
        Font headerFont = new Font("Arial", Font.BOLD, 18); // Change the font and size
        tableHeader.setFont(headerFont);
    }

    private void currencyComboBoxSetter(JComboBox<String> comboBox) {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        List<Currency> currencies = HyperMethod.getCurrencies();
        for (Currency c : currencies) {
            model.addElement(c.getName());
        }
        comboBox.setModel(model);
    }

    private void tableSelectionListener(JTable table) {
        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = table.getSelectedRow();
                    if (selectedRow != -1) {
                        switch (table.getModel().getClass().getName()) {
                            case "org.softtech.internship.frontend.models.MaterialTableModel" -> {
                                String materialName = (String) table.getModel().getValueAt(selectedRow, 0);
                                String price = (String) table.getModel().getValueAt(selectedRow, 1);
                                Optional<Material> material = materialList.stream()
                                        .filter((t) -> t.getName().equals(materialName))
                                        .findFirst();
                                if (material.isPresent()) {
                                    selectedMaterialID = material.get().getId();
                                    jTextFieldMaterialName.setText(materialName);
                                    String[] split = price.split("\\s+");
                                    jTextFieldMaterialPrice.setText(split[0]);
                                    for (int i = 0; i < jComboBoxCurrencies.getItemCount(); i++) {
                                        if (jComboBoxCurrencies.getItemAt(i).equals(split[1])) {
                                            jComboBoxCurrencies.setSelectedIndex(i);
                                            break;
                                        }
                                    }
                                }
                            }
                            case "org.softtech.internship.frontend.models.RecipeTableModel" -> {
                                String recipeName = (String) table.getModel().getValueAt(selectedRow, 0);
                                excludedListModel.setMaterialList(getRecipeMaterials());
                                recipeList.stream()
                                        .filter((t) -> t.getName().equals(recipeName))
                                        .findFirst().ifPresent(recipe -> {
                                            selectedRecipeID = recipe.getId();
                                            List<RecipeMaterial> list = new ArrayList<>();
                                            recipe.getMaterials().forEach(recipeMaterial -> {
                                                list.add(recipeMaterial);
                                                excludedListModel.removeElement(recipeMaterial);
                                            });
                                            includedListModel.setMaterialList(list);
                                            jTextFieldRecipeName.setText(recipeName);
                                        });
                                jTextFieldQuantity.setText("1.00");
                            }
                            case "org.softtech.internship.frontend.models.CurrencyTableModel" -> {
                                String currencyName = (String) table.getModel().getValueAt(selectedRow, 0);
                                Double price = (Double) table.getModel().getValueAt(selectedRow, 1);
                                Optional<Currency> currency = currencyList.stream()
                                        .filter((t) -> t.getName().equals(currencyName))
                                        .findFirst();
                                if (currency.isPresent()) {
                                    selectedCurrencyID = currency.get().getId();
                                    jTextFieldCurrencyName.setText(currencyName);
                                    jTextFieldCurrencyRate.setText(String.valueOf(price));
                                }
                            }
                            default ->
                                throw new AssertionError();
                        }
                    }
                }
            }
        });
    }

    private void listSelectionListener(JList<String> list) {
        list.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int index = list.getSelectedIndex();
                    if (index != -1) {
                        if (e.getSource().equals(jListIncluded)) {
                            String selectedValue = list.getSelectedValue();
                            String regex = "\\b(\\d+(\\.\\d+)?)\\s*kg\\b";
                            Pattern pattern = Pattern.compile(regex);
                            Matcher matcher = pattern.matcher(selectedValue);
                            if (matcher.find()) {
                                String s = matcher.group(1);
                                jTextFieldQuantity.setText(s);
                            }
                        } else {
                            jTextFieldQuantity.setText("1.00");
                        }
                    }
                }
            }
        });
    }

}
